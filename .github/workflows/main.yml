name: huskyCI

on:
  push:
    branches:
      - main
  pull_request:
      branches:
        - main

jobs:
  huskyCI:
    runs-on: ubuntu-latest
    environment: HUSKYCI
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Faz Analise         
        
        run: |
          #curl  -H "Content-Type:application/json" -d '{"repositoryURL":"https://github.com/matholiveira91/hsk.git","repositoryBranch":"main"}' ${{secrets.HUSKY_URL}}
          headers=$(curl -i -H "Content-Type:application/json" -d '{"repositoryURL":"https://github.com/matholiveira91/hsk.git","repositoryBranch":"main"}' ${{secrets.HUSKY_URL}})
          sleep 30s
          echo "request_id=$(echo "$headers" | grep 'X-Request-Id:' | awk -v RS='\r\n' '{print $2}')" >> "$GITHUB_ENV"
          
          
           
      - name: Resultado Analise
        env:
          req_id: ${{ env.request_id }}
          husky_url: ${{ secrets.HUSKY_URL }}
          
        run: | 
           curl  "${{ env.husky_url }}/${{ env.req_id }}"
           stop_pipeline(){
              echo "foram encontradas vulnerabilidades que podem comprometer a aplicação, por favor corrija e commite novamente"
              exit 1
              }
           r_json=$(curl  "${{ env.husky_url }}/${{ env.req_id }}")
                # Verifica se o comando curl teve sucesso (código de retorno igual a zero)
                                  if [ $? -eq 0 ]; then
                    # Define a estrutura de mapeamento desejada usando o object remap
                    remap_mapping='{
                      "result": .result,
                }'

           # Aplica o mapeamento usando a biblioteca jq
            mapped_json=$(echo "$r_json" | jq --argjson mapping "$remap_mapping" '. | reduce keys_unsorted[] as $k ({}; . + { ($mapping[$k]): .[$k] })')

           # Verifique se o mapeamento foi aplicado corretamente (opcional)
           echo "JSON mapeado:"
           echo "$mapped_json"
